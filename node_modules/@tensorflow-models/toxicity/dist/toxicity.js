// @tensorflow/tfjs-models Copyright 2019 Google
(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@tensorflow/tfjs')) :
    typeof define === 'function' && define.amd ? define(['exports', '@tensorflow/tfjs'], factory) :
    (global = global || self, factory(global.toxicity = {}, global.tf));
}(this, function (exports, tf) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */

    function __awaiter(thisArg, _arguments, P, generator) {
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }

    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f) throw new TypeError("Generator is already executing.");
            while (_) try {
                if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
                if (y = 0, t) op = [op[0] & 2, t.value];
                switch (op[0]) {
                    case 0: case 1: t = op; break;
                    case 4: _.label++; return { value: op[1], done: false };
                    case 5: _.label++; y = op[1]; op = [0]; continue;
                    case 7: op = _.ops.pop(); _.trys.pop(); continue;
                    default:
                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                        if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                        if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                        if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                        if (t[2]) _.ops.pop();
                        _.trys.pop(); continue;
                }
                op = body.call(thisArg, _);
            } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
            if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
        }
    }

    // @tensorflow/tfjs-models Copyright 2019 Google
    function __awaiter$1(e,n,r,t){return new(r||(r=Promise))(function(o,i){function a(e){try{u(t.next(e));}catch(e){i(e);}}function s(e){try{u(t.throw(e));}catch(e){i(e);}}function u(e){e.done?o(e.value):new r(function(n){n(e.value);}).then(a,s);}u((t=t.apply(e,n||[])).next());})}function __generator$1(e,n){var r,t,o,i,a={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function s(i){return function(s){return function(i){if(r)throw new TypeError("Generator is already executing.");for(;a;)try{if(r=1,t&&(o=2&i[0]?t.return:i[0]?t.throw||((o=t.return)&&o.call(t),0):t.next)&&!(o=o.call(t,i[1])).done)return o;switch(t=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return a.label++,{value:i[1],done:!1};case 5:a.label++,t=i[1],i=[0];continue;case 7:i=a.ops.pop(),a.trys.pop();continue;default:if(!(o=(o=a.trys).length>0&&o[o.length-1])&&(6===i[0]||2===i[0])){a=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){a.label=i[1];break}if(6===i[0]&&a.label<o[1]){a.label=o[1],o=i;break}if(o&&a.label<o[2]){a.label=o[2],a.ops.push(i);break}o[2]&&a.ops.pop(),a.trys.pop();continue}i=n.call(e,a);}catch(e){i=[6,e],t=0;}finally{r=o=0;}if(5&i[0])throw i[1];return {value:i[0]?i[1]:void 0,done:!0}}([i,s])}}}var stringToChars=function(e){for(var n=[],r=0,t=e;r<t.length;r++){var o=t[r];n.push(o);}return n},TrieNode=function(){function e(e){this.key=e,this.parent=null,this.children={},this.end=!1;}return e.prototype.getWord=function(){for(var e=[],n=this;null!==n;)null!==n.key&&e.unshift(n.key),n=n.parent;return [e,this.score,this.index]},e}(),Trie=function(){function e(){this.root=new TrieNode(null);}return e.prototype.findAllCommonPrefixes=function(e,n,r){if(n.end){var t=n.getWord();e.slice(0,t[0].length).join("")===t[0].join("")&&r.unshift(t);}for(var o in n.children)this.findAllCommonPrefixes(e,n.children[o],r);},e.prototype.insert=function(e,n,r){for(var t=this.root,o=stringToChars(e),i=0;i<o.length;i++)t.children[o[i]]||(t.children[o[i]]=new TrieNode(o[i]),t.children[o[i]].parent=t),t=t.children[o[i]],i===o.length-1&&(t.end=!0,t.score=n,t.index=r);},e.prototype.commonPrefixSearch=function(e){var n=this.root.children[e[0]],r=[];return n?this.findAllCommonPrefixes(e,n,r):r.push([[e[0]],0,0]),r},e}(),separator="▁";function processInput(e){var n=e.normalize("NFKC");return separator+n.replace(/ /g,separator)}var RESERVED_SYMBOLS_COUNT=6,Tokenizer=function(){function e(e){this.vocabulary=e,this.trie=new Trie;for(var n=RESERVED_SYMBOLS_COUNT;n<this.vocabulary.length;n++)this.trie.insert(this.vocabulary[n][0],this.vocabulary[n][1],n);}return e.prototype.encode=function(e){var n=[],r=[],t=[];e=processInput(e);for(var o=stringToChars(e),i=0;i<=o.length;i++)n.push({}),r.push(0),t.push(0);for(i=0;i<o.length;i++)for(var a=this.trie.commonPrefixSearch(o.slice(i)),s=0;s<a.length;s++){var u=a[s],l={key:u[0],score:u[1],index:u[2]};null==n[i+(c=u[0].length)][i]&&(n[i+c][i]=[]),n[i+c][i].push(l);}for(var c=0;c<=o.length;c++)for(var h in n[c]){var f=n[c][h];for(s=0;s<f.length;s++){var d=f[s],p=d.score+t[c-d.key.length];(0===t[c]||p>=t[c])&&(t[c]=p,r[c]=f[s].index);}}for(var v=[],g=r.length-1;g>0;)v.push(r[g]),g-=this.vocabulary[r[g]][0].length;var y=[],_=!1;for(i=0;i<v.length;i++){var b=v[i];_&&0===b||y.push(b),_=0===b;}return y.reverse()},e}(),BASE_PATH="https://storage.googleapis.com/tfjs-models/savedmodel/universal_sentence_encoder/";function loadTokenizer(e){return __awaiter$1(this,void 0,void 0,function(){var n;return __generator$1(this,function(r){switch(r.label){case 0:return [4,loadVocabulary(e)];case 1:return n=r.sent(),[2,new Tokenizer(n)]}})})}function loadVocabulary(e){return void 0===e&&(e=BASE_PATH+"vocab.json"),__awaiter$1(this,void 0,void 0,function(){return __generator$1(this,function(n){switch(n.label){case 0:return [4,tf.util.fetch(e)];case 1:return [2,n.sent().json()]}})})}

    var BASE_PATH$1 = 'https://storage.googleapis.com/tfjs-models/savedmodel/toxicity/';
    function load$1(threshold, toxicityLabels) {
        return __awaiter(this, void 0, void 0, function () {
            var model;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        model = new ToxicityClassifier(threshold, toxicityLabels);
                        return [4, model.load()];
                    case 1:
                        _a.sent();
                        return [2, model];
                }
            });
        });
    }
    var ToxicityClassifier = (function () {
        function ToxicityClassifier(threshold, toxicityLabels) {
            if (threshold === void 0) { threshold = 0.85; }
            if (toxicityLabels === void 0) { toxicityLabels = []; }
            this.threshold = threshold;
            this.toxicityLabels = toxicityLabels;
        }
        ToxicityClassifier.prototype.loadModel = function () {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    return [2, tf.loadGraphModel(BASE_PATH$1 + "model.json")];
                });
            });
        };
        ToxicityClassifier.prototype.loadTokenizer = function () {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    return [2, loadTokenizer()];
                });
            });
        };
        ToxicityClassifier.prototype.load = function () {
            return __awaiter(this, void 0, void 0, function () {
                var _a, model, tokenizer;
                var _this = this;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0: return [4, Promise.all([this.loadModel(), this.loadTokenizer()])];
                        case 1:
                            _a = _b.sent(), model = _a[0], tokenizer = _a[1];
                            this.model = model;
                            this.tokenizer = tokenizer;
                            this.labels =
                                model.outputs.map(function (d) { return d.name.split('/')[0]; });
                            if (this.toxicityLabels.length === 0) {
                                this.toxicityLabels = this.labels;
                            }
                            else {
                                tf.util.assert(this.toxicityLabels.every(function (d) { return _this.labels.indexOf(d) > -1; }), function () { return "toxicityLabels argument must contain only items from the model " +
                                    ("heads " + _this.labels.join(', ') + ", ") +
                                    ("got " + _this.toxicityLabels.join(', ')); });
                            }
                            return [2];
                    }
                });
            });
        };
        ToxicityClassifier.prototype.classify = function (inputs) {
            return __awaiter(this, void 0, void 0, function () {
                var encodings, indicesArr, flattenedIndicesArr, i, indices, values, labels;
                var _this = this;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            if (typeof inputs === 'string') {
                                inputs = [inputs];
                            }
                            encodings = inputs.map(function (d) { return _this.tokenizer.encode(d); });
                            indicesArr = encodings.map(function (arr, i) { return arr.map(function (d, index) { return [i, index]; }); });
                            flattenedIndicesArr = [];
                            for (i = 0; i < indicesArr.length; i++) {
                                flattenedIndicesArr =
                                    flattenedIndicesArr.concat(indicesArr[i]);
                            }
                            indices = tf.tensor2d(flattenedIndicesArr, [flattenedIndicesArr.length, 2], 'int32');
                            values = tf.tensor1d(tf.util.flatten(encodings), 'int32');
                            return [4, this.model.executeAsync({ Placeholder_1: indices, Placeholder: values })];
                        case 1:
                            labels = _a.sent();
                            indices.dispose();
                            values.dispose();
                            return [2, labels
                                    .map(function (d, i) { return ({ data: d, headIndex: i }); })
                                    .filter(function (d) {
                                    return _this.toxicityLabels.indexOf(_this.labels[d.headIndex]) > -1;
                                })
                                    .map(function (d) {
                                    var prediction = d.data.dataSync();
                                    var results = [];
                                    for (var input = 0; input < inputs.length; input++) {
                                        var probabilities = prediction.slice(input * 2, input * 2 + 2);
                                        var match = null;
                                        if (Math.max(probabilities[0], probabilities[1]) > _this.threshold) {
                                            match = probabilities[0] < probabilities[1];
                                        }
                                        results.push({ probabilities: probabilities, match: match });
                                    }
                                    return { label: _this.labels[d.headIndex], results: results };
                                })];
                    }
                });
            });
        };
        return ToxicityClassifier;
    }());

    exports.load = load$1;
    exports.ToxicityClassifier = ToxicityClassifier;

    Object.defineProperty(exports, '__esModule', { value: true });

}));
